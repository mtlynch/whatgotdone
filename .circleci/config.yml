version: 2.1
commands:
  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing environment
      variables.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi
jobs:
  build-frontend:
    docker:
      - image: node:12.18.4-alpine
    steps:
      - checkout
      - run:
          name: Download npm packages
          command: npm --prefix ./frontend install
      - run:
          name: Check JavaScript formatting
          command: npm --prefix ./frontend run check-format
      - run:
          name: Lint client
          command: npm --prefix ./frontend run lint
      - run:
          name: Unit test client
          command: npm --prefix ./frontend run test:unit
      - run:
          name: Build production frontend
          command: npm --prefix ./frontend run build
      - persist_to_workspace:
          root: ./
          paths:
            - ./frontend/dist
  test-backend:
    docker:
      - image: cimg/go:1.13
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Test go packages
          command: go test -v ./...
      - run:
          name: Verify golang formatting
          command: dev-scripts/check-go-formatting
  integration:
    resource_class: xlarge
    machine:
      # Choose an explicit machine image so that we get the latest version of
      # docker-compose.
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - run:
          name: Perform integration tests.
          command: dev-scripts/run-integration-tests
      - store_artifacts:
          path: integration/cypress/videos
      - store_artifacts:
          path: integration/cypress/screenshots
  deploy:
    docker:
      - image: google/cloud-sdk:335.0.0
    environment:
      GCLOUD_PROJECT: whatgotdone
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Retrieve secret environment variables from CircleCI
          command: |
            echo "env_variables:" > env_variables.yaml && \
            echo "  CSRF_SECRET_SEED: '${CSRF_SECRET_SEED}'" >> env_variables.yaml && \
            echo "  USERKIT_SECRET: '${USERKIT_SECRET_PROD}'" >> env_variables.yaml && \
            echo "  PUBLIC_GCS_BUCKET: '${PUBLIC_GCS_BUCKET}'" >> env_variables.yaml && \
            echo "  GOOGLE_ANALYTICS_VIEW_ID: '${GOOGLE_ANALYTICS_VIEW_ID}'" >> env_variables.yaml
      - run:
          name: Retrieve Google Analytics service account client secret from CircleCI
          command: |
            echo "$GOOGLE_ANALYTICS_SERVICE_ACCOUNT_PROD" | \
              base64 --decode > "google-analytics-service-account.json"
      - run:
          name: Retrieve client secret from CircleCI
          command: |
            echo "$CLIENT_SECRET" | \
              base64 --decode > "${HOME}/client-secret.json"
      - run:
          name: Authenticate gcloud
          command: |
            gcloud auth activate-service-account \
              --key-file "${HOME}/client-secret.json"
      - run:
          name: Configure gcloud project
          command: gcloud config set project "${GCLOUD_PROJECT}"
      - run:
          name: Deploy to AppEngine
          command: gcloud --quiet app deploy --promote app.yaml cron.yaml
workflows:
  version: 2
  test-deploy:
    jobs:
      - build-frontend
      - test-backend
      - integration
      - deploy:
          requires:
            - build-frontend
            - test-backend
            - integration
          filters:
            branches:
              only: master
