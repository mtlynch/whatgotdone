version: 2.1
jobs:
  check_whitespace:
    docker:
      - image: cimg/base:2021.04
    resource_class: small
    steps:
      - checkout
      - run:
          name: Check for trailing whitespace
          command: ./dev-scripts/check-trailing-whitespace
      - run:
          name: Check that all text files end in a trailing newline
          command: ./dev-scripts/check-trailing-newline
  build-frontend:
    docker:
      - image: node:12.18.4-alpine
    environment:
      NODE_ENV: production
    steps:
      - checkout
      - run:
          name: Download npm packages (including dev dependencies)
          command: npm --production=false --prefix ./frontend install
      - run:
          name: Check JavaScript formatting
          command: npm --prefix ./frontend run check-format
      - run:
          name: Lint client
          command: npm --prefix ./frontend run lint
      - run:
          name: Unit test client
          command: npm --prefix ./frontend run test:unit
      - run:
          name: Build production frontend
          command: npm --prefix ./frontend run build
      - persist_to_workspace:
          root: ./
          paths:
            - ./frontend/dist
  test-backend:
    docker:
      - image: cimg/go:1.17.4
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Test go packages
          command: dev-scripts/run-go-tests --full
      - store_artifacts:
          path: backend/.coverage.html
      - run:
          name: Verify golang formatting
          command: dev-scripts/check-go-formatting
  build_staging_server:
    docker:
      - image: cimg/go:1.17.4
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: Compile backend (prod)
          command: dev-scripts/build-backend staging
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - ~/go/pkg/mod
      - persist_to_workspace:
          root: ./
          paths:
            - ./bin/whatgotdone
  e2e:
    docker:
      - image: mcr.microsoft.com/playwright:v1.27.1-focal
    environment:
      NODE_ENV: development
    steps:
      - checkout
      - run:
          name: Retrieve staging service account credentials (JSON) from CircleCI
          command: |
            echo "${INTEGRATION_CLIENT_SECRET}" | \
              base64 --decode > gcp-service-account-staging.json
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Run playwright tests
          command: ./dev-scripts/run-e2e-tests --skip-rebuild
      - store_artifacts:
          path: playwright-report
      - store_artifacts:
          path: e2e-results
  deploy:
    machine:
      image: ubuntu-2004:202104-01
      docker_layer_caching: true
    environment:
      # The flyctl changes too much to use a specific version, so use the latest for the
      # time being.
      # https://github.com/superfly/flyctl/issues/394#issuecomment-815890166
      FLYCTL_VERSION: "latest"
    steps:
      - checkout
      - run:
          name: Retrieve GCP service account client secret from CircleCI
          command: |
            echo "$GCP_SERVICE_ACCOUNT" | \
              base64 --decode > gcp-service-account-prod.json
      - run:
          name: Install flyctl
          command: curl -L https://fly.io/install.sh | sh -s "${FLYCTL_VERSION}"
      - run:
          name: Print flyctl version
          command: |
            "${HOME}/.fly/bin/flyctl" version
      - run:
          name: Deploy to fly.io
          command: |
            "${HOME}/.fly/bin/flyctl" deploy \
              --access-token "${FLY_ACCESS_TOKEN}" \
              --local-only
workflows:
  version: 2
  test-deploy:
    jobs:
      - check_whitespace
      - build-frontend
      - test-backend
      - build_staging_server
      - e2e
          requires:
            - build_staging_server
      - deploy:
          requires:
            - check_whitespace
            - build-frontend
            - test-backend
            - e2e
          filters:
            branches:
              only: master
